name: Advanced Bundle Analysis

on:
  pull_request:
    branches: [dev, main]
  workflow_dispatch: # 수동 실행 가능

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 히스토리 필요

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install bundle analyzer
        run: npm install --save-dev @next/bundle-analyzer

      - name: Build with bundle analysis
        run: |
          echo "🔍 번들 분석을 위한 빌드 중..."
          ANALYZE=true npm run build
        env:
          ANALYZE: true

      - name: Generate bundle report
        run: |
          echo "📊 번들 리포트 생성 중..."

          # 번들 크기 정보 수집
          echo "{
            \"build_size_kb\": $(du -s .next | cut -f1),
            \"static_size_kb\": $(du -s .next/static 2>/dev/null | cut -f1 || echo 0),
            \"js_chunks\": $(find .next/static/chunks -name '*.js' -exec basename {} \; | wc -l),
            \"css_files\": $(find .next/static/css -name '*.css' -exec basename {} \; | wc -l),
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"commit\": \"${{ github.sha }}\",
            \"branch\": \"${{ github.ref_name }}\"
          }" > bundle-report.json

          # 상세 파일 목록 생성
          echo "📁 파일별 크기 분석:"
          find .next -type f -name "*.js" -o -name "*.css" -o -name "*.map" | while read file; do
            size=$(stat -c%s "$file" 2>/dev/null || echo 0)
            echo "$file:$size" >> file-sizes.txt
          done

          # 큰 파일들 TOP 10
          echo "🔝 큰 파일 TOP 10:"
          sort -t: -k2 -nr file-sizes.txt | head -10 > top-files.txt

          cat bundle-report.json
          echo "---"
          cat top-files.txt

      - name: Compare with previous build
        if: github.event_name == 'pull_request'
        run: |
          echo "📈 이전 빌드와 비교 중..."

          # 기본값 설정
          PREV_SIZE=0
          CURRENT_SIZE=$(cat bundle-report.json | grep -o '"build_size_kb":[0-9]*' | cut -d: -f2)

          # GitHub API로 이전 빌드 정보 가져오기 (간단한 버전)
          echo "현재 빌드 크기: ${CURRENT_SIZE}KB"
          echo "이전 빌드 크기: ${PREV_SIZE}KB (비교 불가)"

          # 크기 변화 계산
          if [ $PREV_SIZE -gt 0 ]; then
            DIFF=$((CURRENT_SIZE - PREV_SIZE))
            PERCENT=$((DIFF * 100 / PREV_SIZE))
            echo "크기 변화: ${DIFF}KB (${PERCENT}%)"
          else
            echo "크기 변화: 첫 번째 분석"
          fi

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            bundle-report.json
            file-sizes.txt
            top-files.txt
          retention-days: 30

      - name: Create bundle size comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = JSON.parse(fs.readFileSync('bundle-report.json', 'utf8'));
              const topFiles = fs.readFileSync('top-files.txt', 'utf8');

              const buildSizeKB = Math.round(report.build_size_kb / 1024);
              const staticSizeKB = Math.round(report.static_size_kb / 1024);

              const topFilesList = topFiles.split('\n').slice(0, 5).map(file => {
                const [path, size] = file.split(':');
                const sizeKB = Math.round(parseInt(size) / 1024);
                return `- \`${path.replace('.next/', '')}\`: ${sizeKB}KB`;
              }).join('\n');

              const recommendations = [];

              if (buildSizeKB > 5000) {
                recommendations.push('⚠️ **빌드 크기가 큽니다** - 코드 스플리팅 고려');
              }
              if (report.js_chunks > 50) {
                recommendations.push('⚠️ **청크가 많습니다** - 번들 최적화 고려');
              }
              if (recommendations.length === 0) {
                recommendations.push('✅ **번들 크기가 적절합니다**');
              }

              const comment = `## 📊 번들 크기 분석 결과

              ### 📦 전체 크기
              - **빌드 크기**: ${buildSizeKB}KB
              - **정적 파일**: ${staticSizeKB}KB
              - **JS 청크 수**: ${report.js_chunks}개
              - **CSS 파일 수**: ${report.css_files}개

              ### 🔝 큰 파일 TOP 5
              ${topFilesList}

              ### 💡 추천사항
              ${recommendations.join('\n')}

              ---
              *분석 시간: ${report.timestamp}*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });

            } catch (error) {
              console.log('번들 분석 결과 생성 실패:', error.message);
            }
