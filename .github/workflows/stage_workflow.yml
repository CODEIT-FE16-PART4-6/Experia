# 워크플로우의 이름을 정의합니다. GitHub Actions 로그와 UI에서 이 이름이 표시됩니다.
name: Build and Test

on:
  # dev 브랜치 푸시 시 빌드 테스트만 실행 (Vercel 자동배포와 분리)
  push:
    branches: [dev]
  workflow_dispatch: # 수동 실행만 허용 (긴급시)
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# on:
#   workflow_dispatch:
#     branches: [dev-test]
# 워크플로우에서 실행할 작업을 정의합니다.
jobs:
  test:
    # 워크플로우가 실행될 가상 환경을 지정합니다. 여기서는 Ubuntu 22.04를 사용합니다.
    runs-on: ubuntu-22.04
    # 워크플로우에서 실행할 단계들을 정의합니다.
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        # 두 번째 단계: Node.js 환경을 설정합니다.
        with:
          node-version: '22.18.0'
          # Node.js의 버전을 지정합니다.
          # 이 예시에서는 '20.10.0' 버전을 사용합니다.

      - name: Install dependencies
        run: |
          npm ci

      - name: Run linting
        run: |
          npm run lint

      - name: Run tests
        run: |
          npm test

      - name: Remove dev dependencies (배포 환경과 동일하게)
        run: |
          npm prune --omit=dev

      - name: Build test (프로덕션 의존성만으로 빌드)
        run: |
          npm run build

  # deploy:
  #   # test 작업이 성공한 후에만 실행
  #   needs: test
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - name: Deploy to Vercel
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}
  #         vercel-args: '--prod'
