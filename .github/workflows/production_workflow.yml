# Production 배포 워크플로우
name: Production Deployment

# 필요한 Repository secrets
# DOCKER_USERNAME : 도커허브 계정
# DOCKER_PASSWORD : 도커 허브의 토큰값
# GIT_REPOSITORY_NAME : 도커허브에 저장된 Repository이름
# NEXT_PUBLIC_BACKEND_URL : 프로덕션 백엔드 URL
# NEXT_PUBLIC_TEAM : 팀 정보

on:
  push:
    branches: [main]

# 워크플로우에서 실행할 작업을 정의합니다.
jobs:
  test:
    # 워크플로우가 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --only=production=false

      - name: Run linting
        run: |
          npm run lint

      - name: Run tests
        run: |
          npm test

  build:
    # 워크플로우가 실행될 가상 환경을 지정합니다.
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      # Docker Buildx를 설정하는 단계
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Docker 빌드 레이어를 캐시하여 빌드 시간을 단축하는 단계
      - name: Cache docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-production-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-production-

      # Docker 이미지를 저장할 경로를 환경 변수에 설정하는 단계
      - name: Set Docker image
        run: echo "DOCKER_IMAGE=${{secrets.DOCKER_USERNAME}}/${{secrets.GIT_REPOSITORY_NAME}}" >> $GITHUB_ENV

      # Docker Hub에 로그인하는 단계
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Production Docker 이미지를 빌드하고 레지스트리에 푸시하는 단계
      - name: Build and push Production Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile.production
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:production
            ${{ env.DOCKER_IMAGE }}:production-${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}
            NEXT_PUBLIC_TEAM=${{ secrets.NEXT_PUBLIC_TEAM }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    # 이 Job이 'build' Job이 완료된 후에 실행되도록 설정
    needs: build
    # Job 이름 정의
    name: Deploy to Production
    # 이 Job을 실행할 환경 설정 (self-hosted 러너와 특정 레이블 사용.)
    runs-on: [codeit-16-6-final-project-frontend]
    steps:
      # 기존 Production Docker 컨테이너를 중지하고 삭제
      - name: Stop Production Container
        run: docker stop production-container || true

      - name: Remove Production Container
        run: docker rm production-container || true

      # 기존 Production 이미지 정리
      - name: Remove Old Production Images
        run: docker rmi $(docker images -a -q | grep production) || true

      # Docker 이미지를 저장할 경로를 환경 변수에 설정하는 단계
      - name: Set Docker image
        run: echo "DOCKER_IMAGE=${{secrets.DOCKER_USERNAME}}/${{secrets.GIT_REPOSITORY_NAME}}" >> $GITHUB_ENV

      # Docker Hub에 로그인하는 단계
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Hub에서 Production 이미지 pull
      - name: Pull Production Docker image
        run: docker pull ${{ env.DOCKER_IMAGE }}:production

      # Production 컨테이너 실행 (프로덕션 환경 설정)
      - name: Run Production Container
        run: |
          docker run -d \
            -p 8000:3000 \
            --name production-container \
            --restart always \
            --log-opt max-size=10m \
            --log-opt max-file=3 \
            --memory=2g \
            --cpus=2.0 \
            --env-file .env.production \
            ${{ env.DOCKER_IMAGE }}:production

      # 배포 완료 알림
      - name: Deployment Success
        run: echo "✅ Production deployment completed successfully!"
