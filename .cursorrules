# Experia 팀 코드 리뷰 규칙

## 🎯 프론트엔드 코딩 규칙

### 가독성 (Readability)
- **네이밍**: 직관적이고 명확한 변수/함수명 사용
  - 컴포넌트: PascalCase (예: `UserProfile`, `ActivityCard`)
  - 함수/변수: camelCase (예: `handleSubmit`, `userData`)
  - 상수: UPPER_SNAKE_CASE (예: `API_BASE_URL`)
  - 타입/인터페이스: PascalCase (예: `UserType`, `ApiResponse`)

- **복잡한 로직 분리**: 50줄 이상의 함수는 분리 고려
- **주석**: 복잡한 비즈니스 로직에 대한 설명 추가

### 예측 가능성 (Predictability)
- **반환 타입 일관성**: 함수는 항상 동일한 타입 반환
- **에러 처리**: try-catch 블록으로 명확한 에러 처리
- **null/undefined 체크**: 옵셔널 체이닝(`?.`) 활용

### 응집성 (Cohesion)
- **단일 책임 원칙**: 하나의 함수/컴포넌트는 하나의 역할만
- **관련 기능 그룹화**: 관련된 함수들을 함께 배치

### 결합도 최소화 (Low Coupling)
- **의존성 주입**: props를 통한 의존성 전달
- **공통 로직 추출**: 커스텀 훅으로 재사용 가능한 로직 분리
- **인터페이스 분리**: 필요한 props만 전달

## 🏗️ 모노레포 구조 규칙

### 패키지 구조
```
src/
├── components/          # 공통 컴포넌트
│   ├── ui/             # 기본 UI 컴포넌트
│   ├── form/           # 폼 관련 컴포넌트
│   └── layout/         # 레이아웃 컴포넌트
├── app/                # Next.js 앱 라우터
│   ├── (auth)/         # 인증 관련 페이지
│   └── (global)/       # 전역 페이지
├── hooks/              # 커스텀 훅
├── stores/             # 상태 관리 (Zustand)
├── types/              # 타입 정의
├── utils/              # 유틸리티 함수
└── constants/          # 상수 정의
```

### 의존성 관리
- **Yarn workspace**: 패키지 간 의존성 관리
- **버전 일관성**: 동일한 라이브러리는 동일한 버전 사용
- **번들 크기**: 불필요한 라이브러리 import 방지

## 🚀 성능 최적화 규칙

### React 최적화
- **메모이제이션**: `useMemo`, `useCallback` 적절한 사용
- **지연 로딩**: `dynamic import`로 코드 스플리팅
- **이미지 최적화**: Next.js `Image` 컴포넌트 사용

### 번들 크기 관리
- **Tree shaking**: 사용하지 않는 코드 제거
- **동적 import**: 필요시에만 라이브러리 로드
- **번들 분석**: `@next/bundle-analyzer`로 크기 모니터링

## 🔒 보안 규칙

### 데이터 보안
- **민감 정보**: 환경 변수로 관리
- **XSS 방지**: 사용자 입력 sanitization
- **CSRF 보호**: 토큰 기반 인증

### API 보안
- **토큰 관리**: localStorage에 안전하게 저장
- **에러 처리**: 민감한 정보 노출 방지
- **타임아웃**: API 호출 타임아웃 설정

## 📱 접근성 (A11y) 규칙

### 기본 접근성
- **시맨틱 HTML**: 적절한 HTML 태그 사용
- **ARIA 라벨**: 스크린 리더 지원
- **키보드 네비게이션**: Tab 키로 모든 요소 접근 가능
- **색상 대비**: WCAG 2.1 AA 기준 준수

## 🧪 테스트 규칙

### 테스트 작성
- **단위 테스트**: 핵심 비즈니스 로직 테스트
- **컴포넌트 테스트**: 사용자 인터랙션 테스트
- **통합 테스트**: API 연동 테스트

### 테스트 커버리지
- **최소 80%**: 핵심 기능에 대한 테스트 커버리지
- **E2E 테스트**: 주요 사용자 플로우 테스트

## 🎨 코드 스타일 규칙

### TypeScript
- **엄격한 타입**: `any` 타입 사용 금지
- **인터페이스**: 객체 구조 정의
- **제네릭**: 재사용 가능한 타입 정의

### ESLint/Prettier
- **일관된 포맷팅**: Prettier로 코드 스타일 통일
- **린트 규칙**: ESLint로 코드 품질 관리
- **자동 수정**: 가능한 경우 자동으로 수정

## 🚫 금지 사항

### 코드 품질
- ❌ `any` 타입 사용
- ❌ `console.log` 프로덕션 코드에 남기기
- ❌ 하드코딩된 값 (매직 넘버/스트링)
- ❌ 중복 코드
- ❌ 100줄 이상의 단일 함수

### 성능
- ❌ 불필요한 리렌더링
- ❌ 메모리 누수 가능성
- ❌ 큰 번들 크기
- ❌ 동기적 무한 루프

## ✅ 우수 사례

### 코드 품질
- ✅ 명확한 변수명과 함수명
- ✅ 적절한 주석과 문서화
- ✅ 에러 처리와 로깅
- ✅ 타입 안전성

### 사용자 경험
- ✅ 로딩 상태 표시
- ✅ 에러 메시지 표시
- ✅ 접근성 고려
- ✅ 반응형 디자인

## 🔍 리뷰 체크리스트

### 필수 체크 항목
1. **타입 안전성**: TypeScript 타입이 올바르게 정의되었는가?
2. **에러 처리**: 예외 상황이 적절히 처리되었는가?
3. **성능**: 불필요한 리렌더링이나 메모리 누수가 없는가?
4. **접근성**: 스크린 리더와 키보드 사용자를 고려했는가?
5. **보안**: 민감한 정보가 노출되지 않는가?

### 권장 체크 항목
1. **테스트**: 새로운 기능에 대한 테스트가 작성되었는가?
2. **문서화**: 복잡한 로직에 대한 주석이 있는가?
3. **재사용성**: 공통 로직이 적절히 추출되었는가?
4. **일관성**: 팀 코딩 스타일을 따르고 있는가?
